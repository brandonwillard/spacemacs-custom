# -*- mode: snippet -*-
# See https://github.com/tsdye/LKFS for some other useful tweaks.
# name: texw
# key: texw_
# expand-env: ((yas-indent-line 'nil) (yas-wrap-around-region 'nil) (org-adapt-indentation 'nil))
# --

#+TITLE: ${1:title}
#+AUTHOR: Brandon T. Willard
#+DATE: `(format-time-string "%Y-%m-%d")`
#+EMAIL: brandonwillard@gmail.com

#+OPTIONS: ^:nil toc:nil tex:t d:results
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport

#+PROPERTY: header-args:python :session :results output drawer replace

#+LaTeX_CLASS: article
#+LaTeX_HEADER: \usepackage{amsfonts}
#+LaTeX_HEADER: \usepackage{setspace}
#+LaTeX_HEADER: \usepackage{amssymb}
#+LaTeX_HEADER: \usepackage{amsthm}
#+LaTeX_HEADER: \usepackage{amsmath}
#+LaTeX_HEADER: \usepackage{mathtools}
#+LaTeX_HEADER: \usepackage{subcaption}
#+LaTeX_HEADER: \usepackage{suffix}
#+LaTeX_HEADER: \RequirePackage{color}
#+LaTeX_HEADER: \usepackage{adjustbox}
#+LaTeX_HEADER: \usepackage{todonotes}
#+LaTeX_HEADER: \usepackage{draftwatermark}
#+LaTeX_HEADER: \SetWatermarkScale{1}
#+LaTeX_HEADER: \SetWatermarkLightness{0.90}
#+LaTeX_HEADER: \definecolor{bg}{rgb}{0.95,0.95,0.95}
#+LaTeX_HEADER: \usepackage[backgroundcolor=bg, topline=false, bottomline=false, leftline=false, rightline=false]{mdframed}
#+LaTeX_HEADER: \setkeys{Gin}{keepaspectratio}
#+LaTeX_HEADER: \usepackage{minted}
#+LaTeX_HEADER: \setminted{fontsize=\footnotesize, breaklines=true, breakanywhere=true, breakautoindent=true}
#+LaTeX_HEADER: \RequirePackage[hyphens]{url}
#+LaTeX_HEADER: \RequirePackage[colorlinks,citecolor=blue,urlcolor=blue]{hyperref}
#+LaTeX_HEADER: \usepackage[authoryear]{natbib}
#+LaTeX_HEADER: \usepackage{cleveref}
#+LaTeX_HEADER: \allowdisplaybreaks
#+LaTeX_HEADER: \include{math-commands}
#+LaTeX_HEADER: \graphicspath{{../../figures/}{../figures/}{./figures/}{./}}

#+NAME: python_export_setup
#+BEGIN_SRC python :exports none
import IPython
from tabulate import tabulate

class OrgFormatter(IPython.core.formatters.BaseFormatter):
    def __call__(self, obj):
        try:
            return tabulate(obj, headers='keys',
                            tablefmt='orgtbl', showindex='always')
        except:
            return None

ip = get_ipython()
ip.display_formatter.formatters['text/org'] = OrgFormatter()
#+END_SRC

#+NAME: figure_wrap
#+HEADER: :var data=""
#+HEADER: :var caption=""
#+HEADER: :var name=""
#+HEADER: :var width="1.0\\textwidth"
#+BEGIN_SRC elisp :exports none :results silent value
(format (s-join "\n"
  '(;; Correct the below setting when org doesn't understand the value
    ;; (e.g. "\textwidth").
    "#+ATTR_ORG: :width 300"
    "#+ATTR_LATEX: :width %s :float t" ; :caption %s
    "#+CAPTION: %s"
    "#+NAME: %s"
    "[[file:%s]]"))
    width caption label (s-trim data))
#+END_SRC


#+BEGIN_abstract
  $2
#+END_abstract

* Introduction

  $0

* Conclusion

* References
<<bibliography link>>

#+NAME: bib_file
#+BEGIN_SRC elisp :eval t :exports results :results value drawer replace
;; This should spit out the "bib-liography:{file}" (minus used to avoid
;; \`org-ref' parse error) line, where "{file}" is a bib file found in the
;; "src/tex" directory from the project root.
(let* ((project-root (ignore-errors (projectile-project-root)))
       (file-name (car-safe (ignore-errors (f-glob "src/tex/*.bib" project-root)))))
  (when (and file-name
             (f-exists? file-name))
    ;; same here; avoid \`org-ref' source parsing issues.
    ;; See https://github.com/jkitchin/org-ref/issues/492
    (concat "bib" "liography:" (f-relative file-name))))
#+END_SRC

#+BEGIN_SRC elisp :eval t :exports results :results value drawer replace
(if (eq org-export-current-backend 'latex)
    "bibliographystyle:plainnat"
  "bibliographystyle:unsrt")
#+END_SRC


* post-org-setup                                                           :noexport:

#+BEGIN_SRC elisp :eval never :exports none :results none
;; This is an org-ref test snippet.
(require 'org-ref-citeproc)
(when (file-exists-p "test.html")
  (delete-file "test.html"))
(let ((org-export-before-parsing-hook '(orcp-citeproc)))
  (browse-url (org-html-export-to-html)))
#+END_SRC
