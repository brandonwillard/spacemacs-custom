#+TITLE: Emacs Config
#+AUTHOR: Brandon T. Willard

#+STARTUP: hideblocks indent hidestars

* Tasks
** TODO Fix ~ox-ipynb~                                             :orgmode:
*** Links to Listings/Code Blocks
We need ~org-mode~ links to code blocks to export to links to Jupyter Notebook
code cells (e.g. like we did for Markdown).  Looks like that only involves
~a-href~ entries at the start of code cells (see [[https://stackoverflow.com/posts/28080529/revisions][here]]).

#+NAME: org-md-link-customization
#+BEGIN_SRC elisp :eval never
(defun btw--org-gfm-src-block (src-block contents info)
  "Allow attributes (only name, for now) in fenced code block definitions.

E.g., '```{#block-name .python}'

For Pandoc, use with 'fenced_code_attributes'
"
  (let* ((lang (org-element-property :language src-block))
         (code (org-export-format-code-default src-block info))
         (link-id (org-export-get-reference src-block info))
         ;; (name (org-element-property :name src-block))
         ;; "cell1": {"type": "code", "lang": "python", "body": }
         (prefix (if link-id
                     ;; TODO: Add a class for result blocks?
                     (concat "```{#" link-id " ." lang "}\n")
                   (concat "```{." lang "}\n")))
         (suffix "```"))
    (concat prefix code suffix)))

(advice-add #'org-gfm-src-block :override #'btw--org-gfm-src-block)
#+END_SRC

Since ~ox-ipynb~ is so poorly implemented (e.g. it makes *no* use of the
standard export-step functions/hooks), it looks like we might be better off
writing our own Jupyter Notebook exporter.

*** Broken Links
On a related note, it looks like we also need to
run src_elisp[:eval never]{(setq org-export-with-broken-links 'mark)} to
successfully export--even when ~broken-links: t~ is set.

*** "Language Info"
#+NAME: add-lang-info
#+BEGIN_SRC elisp :eval never
(setq ox-ipynb-language-infos
      (cons `(python . ,(alist-get 'ipython ox-ipynb-language-infos))
            ox-ipynb-language-infos))
#+END_SRC
*** Reimplementation

Overall, it looks easier to write a Jupyter Notebook exporter from scratch.  The
Notebook format is given [[https://nbformat.readthedocs.io/en/latest/format_description.html#notebook-file-format][here]].

#+NAME: ox-jnb
#+BEGIN_SRC elisp :eval never
(require 'ox-gfm)

(org-export-define-derived-backend 'jnb 'gfm
  :filters-alist '((:filter-parse-tree . org-jnb-separate-elements))
  :menu-entry
  '(?g "Export to Jupyter Notebook"
       ((?G "To temporary buffer"
            (lambda (a s v b) (org-jnb-export-as-markdown a s v)))
        (?g "To file" (lambda (a s v b) (org-jnb-export-to-markdown a s v)))
        (?o "To file and open"
            (lambda (a s v b)
              (if a (org-jnb-export-to-markdown t s v)
                (org-open-file (org-jnb-export-to-markdown nil s v)))))))
  :filters-alist '((:filter-parse-tree . org-jnb-separate-elements))
  :translate-alist '((src-block . org-jnb-src-block)
                     (template . org-jnb-template)))

(defun org-jnb-export-as-markdown (&rest r))
(defun org-gfm-export-to-markdown (&rest r))

;; NOTES: We could use `org-export-data-with-backend' to pre-convert
;; sections to Markdown.
;; FYI: I think `ox-freemind' does a lot of things we might want to do.

;;; Filters

(defun org-jnb-separate-elements (&rest r)
  (org-element-map tree
      '(src-block)
      ;; (remq 'item org-element-all-elements)
    (lambda (e)
      ;; TODO: Split code blocks into their own sections (at top level?).
      ;; Looks like we'll need to use `org-element-adopt-elements'

      ;; (org-element-put-property
      ;;  e :post-blank
      ;;  (if (and (eq (org-element-type e) 'paragraph)
		  ;;           (eq (org-element-type (org-element-property :parent e)) 'item)
		  ;;           (org-export-first-sibling-p e info)
		  ;;           (let ((next (org-export-get-next-element e info)))
		  ;;             (and (eq (org-element-type next) 'plain-list)
		  ;;                  (not (org-export-get-next-element next info)))))
	    ;;      0
	    ;;    1))
      ))
  tree)

;;; Translators

(defun org-jnb-template (contents info)
  ;; Top-level Structure
  ;; {
  ;;   "metadata" : {
  ;;     "kernel_info": {
  ;;         # if kernel_info is defined, its name field is required.
  ;;         "name" : "the name of the kernel"
  ;;     },
  ;;     "language_info": {
  ;;         # if language_info is defined, its name field is required.
  ;;         "name" : "the programming language of the kernel",
  ;;         "version": "the version of the language",
  ;;         "codemirror_mode": "The name of the codemirror mode to use [optional]"
  ;;     }
  ;;   },
  ;;   "nbformat": 4,
  ;;   "nbformat_minor": 0,
  ;;   "cells" : [
  ;;       # list of cell dictionaries, see below
  ;;   ],
  ;; }

  ;; TODO: contents should be the string list of cells?
  ;; We could also use `(plist-get info :parse-tree)'
  )

;; Markdown Cells
;; {
;;   "cell_type" : "markdown",
;;   "metadata" : {},
;;   "source" : "[multi-line *markdown*]",
;; }
;; These can have attachments
;; {
;;   "cell_type" : "markdown",
;;   "metadata" : {},
;;   "source" : ["Here is an *inline* image ![inline image](attachment:test.png)"],
;;   "attachments" : {
;;     "test.png": {
;;         "image/png" : "base64-encoded-png-data"
;;     }
;;   }
;; }

;; Code Cells
;; {
;;   "cell_type" : "code",
;;   "execution_count": 1, # integer or null
;;   "metadata" : {
;;       "collapsed" : True, # whether the output of the cell is collapsed
;;       "scrolled": False, # any of true, false or "auto"
;;   },
;;   "source" : "[some multi-line code]",
;;   "outputs": [{
;;       # list of output dicts (described below)
;;       "output_type": "stream",
;;       ...
;;   }],
;; }
;; Output Types
;; {
;;   "output_type" : "stream",
;;   "name" : "stdout", # or stderr
;;   "text" : "[multiline stream text]",
;; }
;; {
;;   "output_type" : "display_data",
;;   "data" : {
;;     "text/plain" : "[multiline text data]",
;;     "image/png": "[base64-encoded-multiline-png-data]",
;;     "application/json": {
;;       # JSON data is included as-is
;;       "json": "data",
;;     },
;;   },
;;   "metadata" : {
;;     "image/png": {
;;       "width": 640,
;;       "height": 480,
;;     },
;;   },
;; }
;; {
;;   "output_type" : "execute_result",
;;   "execution_count": 42,
;;   "data" : {
;;     "text/plain" : "[multiline text data]",
;;     "image/png": "[base64-encoded-multiline-png-data]",
;;     "application/json": {
;;       # JSON data is included as-is
;;       "json": "data",
;;     },
;;   },
;;   "metadata" : {
;;     "image/png": {
;;       "width": 640,
;;       "height": 480,
;;     },
;;   },
;; }
;; {
;;   'output_type': 'error',
;;   'ename' : str,   # Exception name, as a string
;;   'evalue' : str,  # Exception value, as a string
;;
;;   # The traceback will contain a list of frames,
;;   # represented each as a string.
;;   'traceback' : list,
;; }

(defun org-jnb-src-block (&rest r)
  ;; Use `json-encode-alist'?
  )

#+END_SRC

** TODO Completion for ~org-babel~ header args                     :orgmode:
The potential headers are stored
in src_elisp{org-babel-common-header-args-w-values}
and src_elisp{(intern (concat "org-babel-header-args:" lang))}.  The
function src_elisp{org-babel-insert-header-arg} uses these to create an
interactive selection menu.

We need to use those functions in/with ~company~.
** TODO Get ~yasnippet~ to work with ~surround~                   :snippets:
Would be great if we could call a snippet--like ~org-src-block~--from ~surround~.

The code for the ~org-src-block~ snippet is below:
#+BEGIN_SRC text :eval never
# -*- mode: snippet; require-final-newline: nil; mode-require-final-newline: nil -*-
# name: org-src-block
# key: #+B
# expand-env: ((yas/indent-line 'fixed) (yas/wrap-around-region 'nil))
# condition: (or (= (current-column) 5) (= (current-column) 0))
# --
# Check out the function org-babel-insert-header-arg for a header args completion approach
# based on the following:
# \${4:$$(unless yas-modified-p (save-mark-and-excursion (org-babel-insert-header-arg "eval")))}
${2:#+NAME: $3}
,#+BEGIN_SRC $1 ${4::eval ${5:never}}
`yas-selected-text`$0
,#+END_SRC
#+END_SRC
** TODO [#A] Fix ~spacemacs/symbol-highlight-transient-state/body~
The function src_elisp{spacemacs/symbol-highlight-transient-state/body} isn't
created before calls to it via @@html:<kbd>@@ * @@html:</kbd>@@.
See the calls to it in [[/home/bwillard/.emacs.d/layers/+spacemacs/spacemacs-navigation/funcs.el]].
** TODO [#A] Create Org LOB file for common export helpers and adjustments :orgmode:
Put code from [[file:../projects/papers/tex-project-templates/src/org/org-export-init.el][=org-export-init.el=]] into an independent, versioned Org file to
be loaded with ~org-babel-lob-ingest~.
** TODO [#A] Slowness with Python file/venv loading                  :python:
Related to my custom ~projectile~ ~pyvenv~ auto-load settings?
** TODO Better window creation and re-use
Set better =purpose= values, so that new frames are never created, terminals
are created for each projectile project, etc.

FYI: src_elisp{pop-up-frames} is src_elisp{nil}, but we're still occassionally seeing new frames.

Look into these settings:
#+BEGIN_SRC elisp
;; `purpose-action-sequences'
(setcdr (assq 'prefer-other-window purpose-action-sequences)
        '(
          purpose-display-reuse-window-buffer
          purpose-display-reuse-window-purpose
          ;; purpose-display-maybe-other-frame
          ;; purpose-display-maybe-pop-up-frame
          purpose-display-maybe-other-window
          purpose-display-maybe-pop-up-window
          purpose-display-maybe-same-window))


#+END_SRC

*** Let's re-configure pop-shell functionality to track project/purpose-specific terminals.

These are the terminal pop-up functions:
#+BEGIN_SRC elisp
(defun spacemacs/projectile-shell-pop ()
  "Open a term buffer at projectile project root."
  (interactive)
  (let ((default-directory (projectile-project-root)))
    (call-interactively 'spacemacs/default-pop-shell)))

(defun spacemacs/default-pop-shell ()
  "Open the default shell in a popup."
  (interactive)
  (let ((shell (if (eq 'multi-term shell-default-shell)
                   'multiterm
                 shell-default-shell)))
    (call-interactively (intern (format "spacemacs/shell-pop-%S" shell)))))
#+END_SRC

The actual pop-shell functions are created by src_elisp{make-shell-pop-command} and
take a single src_elisp{index} argument.

Using something like src_elisp{get-current-persp}, we can find the index/number for
the current perspective and pass that to the pop-command.

Looks like the indexes/numbers is based on the list produced
by src_elisp{persp-names-current-frame-fast-ordered}.

Here's a attempt at the idea:
#+BEGIN_SRC elisp
(defun btw/projectile-shell-pop ()
  "Open a term buffer at projectile project root for the current perspective."
  (let* ((current-persp-name (spacemacs//current-layout-name))
         (persp-idx (seq-find #'identity
                              (seq-map-indexed (lambda (name i)
                                                 (if (eq name current-persp-name)
                                                     i
                                                   nil))
                                               (persp-names-current-frame-fast-ordered))))
         (shell (if (eq 'multi-term shell-default-shell)
                    'multiterm
                  shell-default-shell))
         (shell-pop-func (intern (format "spacemacs/shell-pop-%S" shell))))
    (funcall shell-pop-func persp-idx)))

(advice-add #'spacemacs/projectile-shell-pop :override #'btw/projectile-shell-pop)
#+END_SRC

** TODO What to do about Spacemacs private directory?
[2018-05-26 Sat]
[[file:~/.spacemacs.d/init.el::(setq%20custom-file%20(concat%20user-emacs-directory%20"private/custom-settings.el"))][custom-settings.el]]
We could automatically set up sym-links to files from =~/.spacemacs.d=.
#+BEGIN_SRC elisp :eval never
(if (not (f-symlink-p (concat user-emacs-directory "private")))
    (f-symlink (f-join dotspacemacs-directory "private")
               (concat user-emacs-directory "private")))
#+END_SRC
** TODO Sync ~org-mode~ to Gmail, Google Tasks, Calendar, etc. :orgmode:syncing:
- Note taken on [2018-06-16 Sat 20:36] \\
  Set up ~org-gcal~; appears to work, but auth info isn't very secure and
  recurring events appear as individual entries instead of one.  Also, there's
  no support for multiple accounts (there is a PR that supposedly works).

  Here's my working setup:
  #+BEGIN_SRC elisp
  (use-package org-gcal
    :config (progn
              (when-let* ((client-info (cdr (car (json-read-file
                                                  (f-join dotspacemacs-directory
                                                          "private"
                                                          "org-gcal-brandonwillard-gmail.json")))))
                          (client-id (alist-get 'client_id client-info))
                          (client-secret (alist-get 'client_secret client-info)))
                ;; TODO: Use `plstore'/authstore
                ;; (add-to-list 'auth-sources "~/.authinfo.json.gpg")
                (setq org-gcal-client-id client-id
                      org-gcal-client-secret client-secret
                      org-gcal-file-alist '(("brandonwillard@gmail.com" .
                                             (f-join dotspacemacs-directory
                                                     "private"
                                                     "brandonwillard-gcal.org"))))
                ;; (add-hook 'org-capture-after-finalize-hook (lambda () (org-gcal-sync) ))
                (with-eval-after-load 'org-agenda
                  ;; (add-hook 'org-agenda-mode-hook (lambda () (org-gcal-sync) ))
                  ;; TODO: Map values and `add-to-list'.
                  (add-to-list 'org-agenda-files
                               (f-join dotspacemacs-directory
                                       "private"
                                       "brandonwillard-gcal.org"))))))
  #+END_SRC

  There's a push/pull/sync tool for Google Tasks [[https://bitbucket.org/edgimar/michel-orgmode][here]].
** TODO Set up ~evil-extra-operator~
** TODO Set up ~org-mode~ TODOs and GitHub issues sync      :orgmode:syncing:
[[https://github.com/arbox/org-sync][Here's]] a library that does it.
** TODO Fix/adjust folding in [[file:init.el::(with-eval-after-load%20'hideshow][init.el]]
The meaning of @@html:<kbd>@@ z [r|m] @@html:</kbd>@@ is "level-folding" in
Vim, but ~evil-commands~ has no notion of this.  For ~hideshow~ we can use
~hs-hide-level~ to better approximate level-folding, but we would still have
to work that into evil's framework via ~evil-fold-list~ (e.g. new
level-folding properties--perhaps with fall-backs, too).  We also need an
~hs-show-level~ function.

Toggle fold, i.e. @@html:<kbd>@@ za @@html:</kbd>@@ doesn't work for code
blocks in org-mode.  Default @@html:<kbd>@@ <tab> @@html:</kbd>@@ does work
(it's bound to ~org-cycle~).
** TODO Improve ~org-mode~ links in LaTeX export             :bibtex:orgmode:
Find ~org-ref~ alternative and/or try [[https://github.com/andras-simonyi/citeproc-orgref][~citeproc-orgref~]].
- Note taken on [2018-03-24 Sat 15:02] \\
  An example of a custom export filter:
  #+BEGIN_SRC elisp
  (defun my-latex-export-example-blocks (text backend info)
    "Export example blocks as listings env."
    (when (org-export-derived-backend-p backend 'latex)
      (with-temp-buffer
        (insert text)
        ;; replace verbatim env by listings
        (goto-char (point-min))
        (replace-string "\\begin{verbatim}" "\\begin{lstlisting}")
        (replace-string "\\end{verbatim}" "\\end{lstlisting}")
        (buffer-substring-no-properties (point-min) (point-max)))))

  (add-to-list 'org-export-filter-example-block-functions
               'my-latex-export-example-blocks)
  #+END_SRC
- Note taken on [2018-03-11 Sun 18:20] \\
  Look at [[https://code.orgmode.org/bzg/org-mode/raw/master/contrib/lisp/ox-bibtex.el][ox-bibtex.el]] for ways to implement better syntax than ~org-ref~.
  For instance, here's how we can add custom link types:
  #+BEGIN_SRC elisp :eval never
  (org-link-set-parameters "code" :follow follow :export export)
  #+END_SRC
  See [[https://orgmode.org/worg/org-contrib/org-exp-blocks.html][~org-exp-blocks~]] for ways to pre-process blocks on export.
** TODO Better ~org-babel~ Python interaction               :python:orgbabel:
  - Note taken on [2018-05-02 Wed 22:01] \\
    A lot of this has been done in the ~org-extras~ layer.  There are still some
    completion issues to fix, though.
  - Note taken on [2018-04-06 Fri 12:41] \\
    Consider adding a =org-babel-ipython-associate-session=.
  - Note taken on [2018-04-04 Wed 17:14] \\
    =ob-ipython='s completion is terribly slow; consider refactoring to keep a
    low-level network connection, instead of calling a python script that
    re-connects to the kernel every time =ob-ipython= issues a command.

    @@html:<kbd>@@ , , @@html:</kbd>@@ naively sends buffer lines, which breaks python code sent to
    the default IPython parser.  The function being called is ~org-babel-load-in-session~
    and/or ~org-babel-load-session:python~.  There's an ~insert~ line that should probably use
    ~python-shell-send-string-echo~ instead.

    After making those changes, it seems like ~org-babel-python-evaluate-session~ might also need to
    be altered.

** TODO Auto-zoom Based on Current Resolution
Use functions like =(x-display-pixel-width)= to set the zoom level (with =(spacemacs/zoom-frm-out)=).

** TODO Fix ~srefactor~ for Elisp
<2018-05-23 Wed>
~srefactor-lisp-format-sexpr~ will break the following two forms:
#+BEGIN_SRC elisp
(defun blah ()
  (rx (
       seq ?\[
       ?\{)))

(use-package 'blah
  :init (blah blah iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii)
  :post-init (blah blah blah)
  )
#+END_SRC

My guess is that it has to do with sub-form processing.

For the latter example, [[file:../.emacs.d/elpa/develop/srefactor-20170223.540/srefactor-lisp.el::(defun%20srefactor--lisp-format-one-or-multi-lines%20(beg%20end%20orig-point%20format-type%20&optional][the function that parses these forms]] is probably not
appending a space after the end of a sub-form when it's followed by a keyword.

#+BEGIN_SRC elisp :results pp :wrap "SRC elisp :eval never :results none"
(with-temp-buffer
  (semantic-default-elisp-setup)
  (emacs-lisp-mode)
  (semantic-lex-init)
  (insert "(use-package 'blah
            :init (blah blah iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii)
            :post-init (blah blah blah)
            )")
  (semantic-emacs-lisp-lexer (point-min) (point-max) 1))
#+END_SRC

#+RESULTS:
#+BEGIN_SRC elisp :eval never :results none
((open-paren 1 . 2)
 (symbol 2 . 13)
 (punctuation 14 . 15)
 (symbol 15 . 19)
 (symbol 32 . 37)
 (semantic-list 38 . 92)
 (symbol 105 . 115)
 (semantic-list 116 . 132)
 (close-paren 145 . 146))
#+END_SRC

** TODO Re-purpose existing =use-package= calls in order to set custom package location.
[2018-05-30 Wed]
[[file:~/.spacemacs.d/init.el::;;%20(use-package%20org-ref]]

For example, src_elisp{org-ref}'s src_elisp{use-package} can be found in src_elisp{bibtex/init-org-ref}.

#+BEGIN_SRC elisp
;; (use-package org-ref
;;   :defer t
;;   :load-path ("~/projects/code/emacs/org-ref"))

(symbol-function bibtex/init-org-ref)
#+END_SRC
** DONE [#A] Fix src_elisp{org-babel-result-end}                   :orgmode:
CLOSED: [2019-02-05 Tue 11:55]
~org-mode~ source blocks inside drawers will not replace existing results
(themselves in drawers).

The problem: src_elisp{(org-babel-result-end)} isn't working inside drawers.

Specifically, it looks like src_elisp{(org-element-at-point)} returns
a src_elisp{paragraph} element within a drawer.  Within that is the actual
nested drawer, but, since src_elisp{(org-babel-result-end)} fails to return
a recognized element type (i.e. not an element in
src_elisp{'(drawer example-block export-block fixed-width item plain-list src-block table)})
it fails.

#+BEGIN_SRC elisp :results drawer replace
(defun btw--org-babel-result-end ()
  "Return the point at the end of the current set of results."
  (cond
   ((looking-at-p "^[ \t]*$")
    (point)) ;no result
   ((looking-at-p (format "^[ \t]*%s[ \t]*$" org-bracket-link-regexp))
    (line-beginning-position 2))
   (t (let* ((element (org-element-at-point))
             (elements (cons element
                             (if (eq (org-element-type element) 'paragraph)
                                 (list (org-element-property :parent element))))))
        (if-let ((element (seq-find (lambda (x)
                                      (memq (org-element-type x)
                                            ;; Possible results types.
                                            '(drawer example-block export-block fixed-width
                                                     item plain-list src-block table)))
                                    elements)))
            (save-excursion
              (goto-char (min (point-max) ;for narrowed buffers
                              (org-element-property :end element)))
              (skip-chars-backward " \r\t\n")
              (line-beginning-position 2))
          (point))))))

(advice-add #'org-babel-result-end :override #'btw--org-babel-result-end)
#+END_SRC

#+RESULTS:
:RESULTS:
^[ 	]*:\(\(?:\w\|[-_]\)+\):[ 	]*$
:END:

# Start a drawer
:BLAH:

#+BEGIN_SRC elisp :results drawer replace
(print "hi")
#+END_SRC

# New, nested drawer
:BLOG:
#+BEGIN_SRC elisp :results drawer replace
(print "hi")
#+END_SRC

:END:

:END:
** DONE [#A] Allow ~persp-mode~ to set ~projectile-mode~ project.
CLOSED: [2018-09-09 Sun 23:47]
Viewing a buffer for a file in a different ~projectile-mode~ project from
within a ~persp-mode~ opened for a different project doesn't prioritize the
~pesp-mode~-specific project when calling ~projectile-mode~ functions.

If we can get the ~projectile-mode~ project name/location from ~persp-mode~,
we might only need to set/wrap/override ~projectile-project-root~.

This appears to work:
#+BEGIN_SRC elisp :eval never
(defun btw/persp-assign-projectile-root (persp persp-hash)
  "Add a variable to the perspective tracking the projectile project name
(if any).

This is run before the buffer is created, so we need to get the project name
from this perspective's path.  We assume the perspective's name is the project
path (which it is per Spacemacs)"
  (let* ((persp-name (safe-persp-name persp))
         (persp-projectile-dir (when (and (f-dir? persp-name)
                                          (funcall projectile-project-name-function
                                                   persp-name))
                                 persp-name)))
    (set-persp-parameter 'projectile-project-root
                         persp-projectile-dir
                         persp)))

(add-hook 'persp-created-functions #'btw/persp-assign-projectile-root)

(defun btw/persp-projectile-project-root (oldfun &rest r)
  "Use the perp project name and regular `projectile-project-root' as a
fallback."
  (let* ((persp-name (spacemacs//current-layout-name))
         (persp-projectile-dir (when (and (f-dir? persp-name)
                                          (funcall projectile-project-name-function
                                                   persp-name))
                                 persp-name)))
    ;; If the persp name is a directory and is mapped to a projectile project,
    ;; return the directory; otherwise, use the fallback.
    (or persp-projectile-dir
        (persp-parameter 'projectile-project-root)
        (apply oldfun r))))

(advice-add #'projectile-project-root :around #'btw/persp-projectile-project-root)

(defun btw/persp-projectile-project-name (oldfun &rest r)
  "Query the persp layout for the projectile project name and use projectile
for the fallback."
  (let* ((persp-name (spacemacs//current-layout-name))
         (persp-projectile-name (if (f-dir? persp-name)
                                    (funcall projectile-project-name-function
                                             persp-name)
                                  (persp-parameter 'projectile-project-root))))
    (or persp-projectile-name (apply oldfun r))))

(advice-add #'projectile-project-name :around #'btw/persp-projectile-project-name)
#+END_SRC

** DONE Fix project-root finding in ~lsp-mode~                          :lsp:
CLOSED: [2018-08-09 Thu 10:41]
- Note taken on [2018-08-09 Thu 10:40] \\
  This seems to be working:

  #+BEGIN_SRC elisp
  (defun btw/lsp-python-workspace-root ()
    (or (when (fboundp 'projectile-project-root)
          (projectile-project-root))
        (lsp-make-traverser (directory-files dir nil "\\(__init__\\|setup\\)\\.py"))
        (if lsp-message-project-root-warning
            (message "Couldn't find project root, using the current directory as the root.")
          (lsp-warn "Couldn't find project root, using the current directory as the root.")
          default-directory)))
  (lsp-define-stdio-client lsp-python "python"
                           #'btw/lsp-python-workspace-root
                           '("pyls"))
  #+END_SRC
- Note taken on [2018-03-17 Sat 14:03] \\
  For example, =lsp-python= uses the following to find a project's root directory:
  #+BEGIN_SRC elisp
  (lsp-define-stdio-client lsp-python "python"
                           (lsp-make-traverser #'(lambda (dir)
                                                   (or (when (fboundp 'projectile-project-root)
                                                         (projectile-project-root))
                                                       (directory-files
                                                        dir nil "\\(__init__\\|setup\\)\\.py"))))
                           '("pyls"))
  #+END_SRC

  This only applies to projects that are Python packages.  Even then, I'm not sure it does
  well, because I'm always getting errors.

** DONE Stop fill from breaking some syntax elements in ~org-mode~  :orgmode:
CLOSED: [2018-05-23 Wed 13:24]
<2018-05-23 Wed>
The following will split within the src statement; any way to change that?
#+BEGIN_SRC org :eval never

aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa src_python[:eval never :exports code]{print("hi")}

#+END_SRC

Looks like src_elisp{fill-nobreak-predicate} is an answer.
#+BEGIN_SRC elisp :results none
(defun spacemacs//in-org-src-inline ()
  (let ((element (org-element-context)))
    (eq (nth 0 element) 'inline-src-block)))

(setq-mode-local org-mode
                 fill-nobreak-predicate
                 (cl-pushnew #'spacemacs//in-org-src-inline fill-nobreak-predicate))
#+END_SRC

** DONE [#A] Configure ~persp-mode~, ~projectile-mode~ and ~pyvenv~ to work together :python:projectile:persp:pyvenv:
CLOSED: [2018-04-27 Fri 19:21]
- Note taken on [2018-04-27 Fri 19:20] \\
  The =python-extras= layer now provides venv switching functionality.
- Note taken on [2018-01-28 Sun 12:54] \\
  Extending [[file:/usr/share/emacs/27.0.50/lisp/progmodes/python.el.gz::(defun%20python-shell-get-process-name%20(dedicated)][~python-shell-get-process-name~]] to include
  ~projectile-project-name~ might enable per-project inferior processes.

- Note taken on [2018-01-19 Fri 14:46] \\
  Perhaps the [[file:~/.emacs.d/layers/+spacemacs/spacemacs-layouts/funcs.el::(defun%20spacemacs/layout-switch-by-pos%20(pos)][spacemacs layout switching function]] should call
  ~projectile-persp-switch-project~ instead of ~persp-switch~.  We could advise
  ~persp-switch~ or simply replace ~spacemacs/layout-switch-by-pos~.  Either way, I
  think we'll need to check for an associated project, get the name or location
  and pass *that* to ~projectile-persp-switch-project~.
  Also, check out [[https://gist.github.com/Bad-ptr/1aca1ec54c3bdb2ee80996eb2b68ad2d#file-persp-projectile-auto-persp-el][these customizations]].

- [X] Fix [[file:/usr/share/emacs/27.0.50/lisp/progmodes/python.el.gz::(defun%20python-shell-get-buffer%20()][python-mode inferior buffer]] naming/initialization; we should be assigning inferior processes to
  projects/perspectives, so naming could be one way to do that.

- [-] Implement an alist with project/perspective-to-venv entries.
  [[https://github.com/bbatsov/projectile/issues/139][Here's a discussion]] on project-local variables.  [[https://github.com/emacs-php/projectile-variable][This]] looks like an existing solution.
  We need to add venv awareness to ~org-babel~ via
  ~org-babel-prep-session:python~.  ~org-babel~ might only need
  ~python-shell-virtualenv-root~ set in order to start a venv-ed inferior shell.
  =blah=.

  This doesn't need to be done.

- [X] Hook for project/perspective changes.
  The correct "hook" may be ~persp-before-switch-functions~.
  #+BEGIN_SRC elisp
  (defun persp-pyvenv-switch ())
  (add-to-list 'persp-before-switch-functions #'(lambda (persp-name frame-or-window)
                                                  (message "Switching to %s" persp-name)))
  #+END_SRC

  #+BEGIN_SRC elisp
  ;; TODO: After persp change, check for virtualenv change.
  (cl-pushnew #'(lambda (window)
                  (debug)
                  ;; (safe-persp-parameters (get-current-persp))

                  ;; XXX: This does a `locate-dominating-file' search.
                  ;; (spacemacs//pyvenv-mode-set-local-virtualenv)

                  ;; (when (and (bound-and-true-p project-pyvenv-virtual-env-name)
                  ;;            (eq project-pyvenv-virtual-env-name pyvenv-virtual-env-name))
                  ;;   (pyvenv-workon pyvenv-virtual-env-name))
                  )
              persp-activated-functions)
  #+END_SRC

** DONE Try ~ob-async~ (again)                                      :orgmode:
CLOSED: [2018-04-22 Sun 14:20]

** DONE Should ~spacemacs|use-package-add-hook~ be used instead of ~with-eval-after-load~?
CLOSED: [2018-04-22 Sun 14:20]
[2018-03-09 Fri]
[[file:~/.spacemacs.d/init.el::;;%20(spacemacs|use-package-add-hook%20org]]
** DONE Clean up ~user-config~                                    :spacemacs:
CLOSED: [2018-04-27 Fri 10:32]
  - Note taken on [2018-04-22 Sun 14:18] \\
    Moved org-mode and Python settings and functions to the layers =org-extras= and =python-extras=.
    [[file:init.el::(defun%20dotspacemacs/user-config%20()][~dotspacemacs/user-config~]] is too busy, and only getting busier.  Some of its
    content should be broken off into new layers and/or packages.

** DONE [#A] Fix flycheck for Python virtual envs.                   :python:
CLOSED: [2018-03-17 Sat 14:20]
See variables involving ~python-pylint~ and ~python-pycompile~.
** DONE [#B] Fix ~ansi-term~ redraws
CLOSED: [2018-01-14 Sun 19:15]
A new line and prompt is printed when the terminal window is resized.
Might be related to this: ~window-adjust-process-window-size-function~.
This little bit of debugging might be useful:
#+BEGIN_SRC elisp
(with-current-buffer (get-buffer "*ansi-term-1*"))
(cl-pushnew #'(lambda (&rest args) (debug)) before-change-functions)
#+END_SRC

and to undo this debug setting...
#+BEGIN_SRC elisp
(with-current-buffer (get-buffer "*ansi-term-1*"))
(pop before-change-functions)
#+END_SRC

This was apparently due to the ~steef~ prompt I was using in ~zprezto~.  It must've
been using special control characters.

** DONE Fix "unbound helm-source-info-elisp" error
Looks like my custom Emacs build caused a change in default
directories?  This fixed it:
#+BEGIN_SRC elisp
(with-eval-after-load 'info
  (customize-save-variable
   'Info-default-directory-list
   '("/usr/share/info/emacs-27" "/usr/local/share/info/"
     "/usr/share/info/" "/usr/share/info/")))
#+END_SRC

* Old Settings
** Conda
#+BEGIN_SRC elisp
(use-package conda
  :defer t
  :init (progn
          (custom-set-variables '(conda-anaconda-home "~/apps/anaconda3")
                                '(conda-message-on-environment-switch nil))
          (conda-env-initialize-interactive-shells)
          (conda-env-initialize-eshell)
          (defun btw/conda--get-name-from-env-yml (filename)
            "Pull the `name` property out of the YAML file at FILENAME."
            (when filename
              (let ((env-yml-contents (f-read-text filename)))
                ;; We generalized the regex to include `-`.
                (if (string-match "name:[ ]*\\([[:word:]-]+\\)[ ]*$"
                                  env-yml-contents)
                    (match-string 1 env-yml-contents)
                  nil))))
          ;; Could've just overriden this package's function, but Emacs' advice functionality
          ;; covers this explicit case *and* make it clear via the help/documentation that the
          ;; function has been changed.

          (advice-add 'conda--get-name-from-env-yml
                      :override #'btw/conda--get-name-from-env-yml)
          (defun btw/conda--find-project-env (dir)
            "Finds an env yml file for a projectile project.
Defers to standard `conda--find-env-yml' otherwise."
            (let* ((project-root (ignore-errors (projectile-project-root)))
                   (file-name (f-expand "environment.yml" project-root)))
              (when (f-exists? file-name)
                file-name)))
          ;; Avoid unnecessary searches by using *only* a project-centric environment.yml file.
          ;; To fallback on an upward directory search, use `:before-until'.
          (advice-add 'conda--find-env-yml :override #'btw/conda--find-project-env)
          ;; Since `editorconfig-custom-hooks' activates a discovered conda env, and `conda'
          ;; sets the buffer-local variable `conda-project-env-name', the env should be found
          ;; by `conda-env-autoactivate-mode' (because it checks that variable).
          (conda-env-autoactivate-mode)
          ;; TODO: Check `window-purpose' for "edit", "general", etc.  Could also use `post-command-hook'
          ;; (see the comment about using `(while-no-input (redisplay) CODE)')
          ;; This is what auto-activates conda environments after switching layouts:
          (advice-add 'select-window :after #'conda--switch-buffer-auto-activate)))

(with-eval-after-load 'spaceline
  ;; Hijacks existing segment.  Should add cases for both envs.
  (spaceline-define-segment python-pyenv
    "The current python env.  Works with `conda'."
    (when (and active
               ;; TODO: Consider not restricting to `python-mode', because
               ;; conda envs can apply to more than just python operations
               ;; (e.g. libraries, executables).
               ;; (eq 'python-mode major-mode)
               ;; TODO: Display `conda-project-env-name' instead?  It's buffer-local.
               (boundp 'conda-env-current-name)
               (stringp conda-env-current-name))
      (propertize conda-env-current-name 'face 'spaceline-python-venv
                  'help-echo "Virtual environment (via conda)")))
  (spaceline-compile))

#+END_SRC
** ~python-x~
#+BEGIN_SRC elisp
(use-package python-x
  :defer t
  ;; :commands
  ;; (python-shell-send-line python-shell-print-region-or-symbol)
  :init
  (progn
    (evil-leader/set-key-for-mode 'python-mode
      "sl" 'python-shell-send-line)
    (evil-leader/set-key-for-mode 'python-mode
      "sw" 'python-shell-print-region-or-symbol))
  ))
#+END_SRC

** ~tex-mode~
#+BEGIN_SRC elisp
(defun btw/tex-mode-settings ()
  (setq latex-directory "")
  (setq latex-run-command ""))

(add-hook 'tex-mode-hook 'btw/tex-mode-settings)
#+END_SRC
** Messages Buffer
#+BEGIN_SRC elisp :eval never
(defun btw/messages-auto-tail (&rest _)
  "Make *Messages* buffer auto-scroll to the end after each message.

 From https://stackoverflow.com/a/37356659/3006474"
  (let* ((buf-name "*Messages*")
         ;; Create *Messages* buffer if it does not exist
         (buf (get-buffer-create buf-name)))
    ;; Activate this advice only if the point is _not_ in the *Messages* buffer
    ;; to begin with. This condition is required; otherwise you will not be
    ;; able to use `isearch' and other stuff within the *Messages* buffer as
    ;; the point will keep moving to the end of buffer :P
    (when (not (string= buf-name (buffer-name)))
      ;; Go to the end of buffer in all *Messages* buffer windows that are
      ;; *live* (`get-buffer-window-list' returns a list of only live windows).
      (dolist (win (get-buffer-window-list buf-name nil :all-frames))
        (with-selected-window win
          (goto-char (point-max))))
      ;; Go to the end of the *Messages* buffer even if it is not in one of
      ;; the live windows.
      (with-current-buffer buf
        (goto-char (point-max))))))
(advice-add 'message :after #'btw/messages-auto-tail)

(defun btw/ad-timestamp-message (format-string &rest args)
  "Advice to run before `message' that prepends a timestamp to each message.
  Activate this advice with:
    (advice-add 'message :before 'btw/ad-timestamp-message)
  Deactivate this advice with:
    (advice-remove 'message 'btw/ad-timestamp-message)
  From https://emacs.stackexchange.com/a/33523"
  (if message-log-max
      (let ((deactivate-mark nil)
            (inhibit-read-only t))
        (with-current-buffer "*Messages*"
          (goto-char (point-max))
          (if (not (bolp))
              (newline))
          (insert (format-time-string "[%F %T.%3N] "))))))
(advice-add 'message :before 'btw/ad-timestamp-message)
#+END_SRC
* Utils

** Remove all advice
#+BEGIN_SRC elisp :eval none
(defun remove-all-advice (func-symbol)
  (advice-function-mapc (lambda (f f-alist)
                          (advice-remove func-symbol f))
                        (advice--symbol-function func-symbol)))
#+END_SRC
